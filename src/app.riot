<app>
    <router base="/home">
        <div class="main-container">
            <div class="sidebar">
                <site-header></site-header>

                <sidebar-nav
                    selected-screen={ state.sidebarScreen }
                    open-screen={ selectSidebarScreen }>
                </sidebar-nav>

                <aboutbox
                    if={ state.sidebarScreen === 'about' }>
                </aboutbox>

                <filter-control
                    if= { state.sidebarScreen === 'filter' }
                    teams={ teamsData }
                    on-filter-player-name={ filterPlayerName }
                    on-change-filter={ applyFilter }
                    on-change-sort={ changeSort }>      
                </filter-control>
            </div>

            <div class="main-content">
                <gallery
                    players={ state.playersShown }
                    players-map={ playersIdMap }>
                </gallery>
            </div>

        </div>
        <route path="/#:player">
            <overlay 
                player={ getPlayerData(route.params.player) }>
            </overlay> 
        </route>
    </router>

    <style>
    :host {
        font-family: "Lora", sans-serif;
    }

    .main-container {
        width: 98%;
        max-width: 1000px;
        margin: 20px auto 0 auto;

        height: calc(100vh - 20px);

        display: grid;
        grid-template-columns: 1fr;
        
        /* Prevent Peanutiel from overflowing */
        overflow-x: hidden; 
    }

    @media (min-width: 900px) {
        .main-container {
            overflow: hidden;
            grid-template-columns: 280px 1fr;
        }

        .sidebar, .main-content {
            overflow-y: auto;
        }
    }

    @media (min-width: 1400px) {
        .main-container {
            max-width: 80%;
        }
    }

    .sidebar {
        padding-right: 0.2em;
        max-width: 500px;
    }
    </style>

    <script>
    import { Router, Route } from '@riotjs/route'
    
    import Gallery from './components/Gallery.riot'
    import Overlay from './components/Overlay.riot'
    import FilterControl from './components/FilterControl.riot'
    import Aboutbox from './components/Aboutbox.riot'
    import SidebarNav from './components/SidebarNav.riot'
    import SiteHeader from './components/SiteHeader.riot'

    import PlayersData from './players.json'
    import TeamsData from './teams.json'
    import TeamsList from './teamsReverseId.js'

    export default {
        components: { Gallery, Overlay, Router, Route, FilterControl, Aboutbox, SidebarNav, SiteHeader },

        playersData: PlayersData,

        teamsData: TeamsData,

        teamsList: TeamsList,
        // This list contains teams in {teamname: index} format
        // For sorting by teams

        onBeforeMount() {
            this.state = {
                playersShown: this.playersData,
                currentSortType: '',
                sidebarScreen: 'filter'
            }
            
            console.log(this.teamsData.map(subleague => {
                return subleague.teams
            }).flat())
        },


        getPlayerData(id) {
            return this.playersData.find(player => player.id === id)
        },

        filterPlayerName(nameToSearch) {
            const playersShown = this.playersData.filter(player => {
                    return player['full-name'].toLowerCase().includes( nameToSearch.toLowerCase())
            })

            this.update({
                playersShown
            })

            this.applySort()
        },

        applyFilter(filterState) {
            const filters = filterState.appliedFilters
            const team = filterState.teamFilter


            if (!filters.length || !team) {
                // No filter checkbox is checked
                // Or no team to filter to is checked
                // Return to default

                this.update({
                    playersShown: this.playersData
                })

                this.applySort()

                return
            }

            const playersShown = this.playersData.filter(player => {
                if (filters.includes("wasmemberof")) {

                    if (player['former-teams'].includes(team)) {
                        return true
                    }

                }

                if (filters.includes("ismemberof")) {

                    if (player['team'] === team) {
                        return true
                    }
            
                }

                return false
            })

            this.update({
                playersShown
            })

            this.applySort()

        },

        changeSort(e) {
            const sortType = e.target.value

            this.update({
                currentSortType: sortType
            })

            this.applySort()
        },

        applySort() {
            const sortType = this.state.currentSortType

            if (!sortType) {
                // If no sortType is set (so it's still default)
                // don't sort anything
                return
            }

            console.log(sortType)

            let playersShown = this.state.playersShown

            if (sortType === 'original') {
                // Slice so we don't modify the original
                playersShown = playersShown.slice().sort((playera, playerb) => {

                    return playera.index - playerb.index

                })
            }

            else if (sortType === 'alphabetical') {
                // Slice so we don't modify the original
                playersShown = playersShown.slice().sort((playera, playerb) => {

                    if (playera['full-name'] < playerb['full-name']) {
                        return -1
                    }

                    if (playera['full-name'] > playerb['full-name']) {
                        return 1
                    }

                    return 0

                })
            }

            else if (sortType === 'currentteam') {

                // Slice so we don't modify the original
                const teamsList = this.teamsList

                playersShown = playersShown.slice().sort((playera, playerb) => {

                    if (teamsList[playera['team']] < teamsList[playerb['team']]) {
                        return -1
                    }

                    if (teamsList[playera['team']] > teamsList[playerb['team']]) {
                        return 1
                    }

                    return 0

                })
            }

            this.update({
                playersShown,
            })
        },

        selectSidebarScreen(screen) {
            this.update({
                sidebarScreen: screen
            })
        }

    }
    </script>
</app>
