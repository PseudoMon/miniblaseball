<app>
    <router base="/home">
        <div class="main-container">
            <div class="sidebar">
                <dark-mode-toggle on-toggle={ toggleDarkmode }>
                </dark-mode-toggle>

                <site-header></site-header>

                <sidebar-nav
                    selected-screen={ state.sidebarScreen }
                    open-screen={ selectSidebarScreen }>
                </sidebar-nav>


                <filter-control
                    style="{ setScreenDisplay('filter') }"
                    teams={ state.teamsData }
                    on-filter-player-name={ filterPlayerName }
                    on-change-filter={ applyFilter }
                    on-change-sort={ changeSort }
                    on-switch-gallery={ switchGallery }
                    selected-gallery={ state.galleryScreen }>      
                </filter-control>

                <aboutbox
                    if={ state.sidebarScreen === 'about' }>
                </aboutbox>


            </div>

            <div class="main-content">
                <gallery
                    if={ state.galleryScreen === 'main' }
                    players={ state.playersShown }>
                </gallery>
                <gallery
                    if={ state.galleryScreen === 'guest' }
                    players={ state.playersShown }>
                </gallery>
            </div>

        </div>

        <totop-button
            class="totop-button"
            onClick={ scrollToTop }>
        </totop-button>

        <route path="/#:player">
            <overlay 
                player={ getPlayerData(route.params.player) }>
            </overlay> 
        </route>
    </router>

    <style>
    :host {
        font-family: "Lora", sans-serif;
        --color-bg: #fff;
        --color-text: #000;
        --color-soft: #eee;
        --color-link: #5c5c5c;

        --color-modalbg: #494a46;
        --color-overlaybg: rgba(0,0,0,0.6);
        --color-modaltext: #fff;

        --color-selectbg: #b3b3b3;

        background-color: var(--color-bg);
        min-width: 100vw;
        min-height: 100vh;
    }

    :host.darkmode {
        --color-bg: #1c1d1b;
        --color-text: #fff;
        --color-soft: #2d2f32;
        --color-link: #848484;

        --color-modalbg: #1c1d1b;

        --color-selectbg: var(--color-soft);
    };

    .main-container {
        width: 98%;
        max-width: 1000px;
        margin: 0 auto;

        display: grid;
        grid-template-columns: 1fr;

        color: var(--color-text);
    }

    @media (min-width: 760px) {
        .main-container {
            height: 100vh;

            grid-template-columns: 290px 1fr;
        }

        .sidebar, .main-content {
            overflow-y: auto;
        }
    }

    @media (min-width: 1400px) {
        .main-container {
            max-width: 80%;
        }
    }

    .main-content {
        padding-top: 20px;
        /* Prevents huge players from overflowing the gallery */
        overflow-x: hidden;
    }

    .sidebar {
        
        padding: 0 1em;
        max-width: 500px;
        width: calc(100% - 2em);
        margin: 20px auto 0 auto;

        box-sizing: border-box;
    }

    @media (min-width: 760px) {
        .sidebar {
            padding: 0 0.2em;
            width: 100%;
            border-right: solid 3px var(--color-soft);
        }

        .totop-button {
            display: none;
        }
    }
    </style>

    <script>
    import { Router, Route } from '@riotjs/route'
    
    import Gallery from './components/Gallery.riot'
    import Overlay from './components/Overlay.riot'
    import FilterControl from './components/FilterControl.riot'
    import Aboutbox from './components/Aboutbox.riot'
    import SidebarNav from './components/SidebarNav.riot'
    import SiteHeader from './components/SiteHeader.riot'
    import TotopButton from './components/TotopButton.riot'
    import DarkModeToggle from './components/DarkModeToggle.riot'

    import PlayersData from './players.json'
    import TeamsData from './teams.json'
    import GuestPlayersData from './guestPlayers.json'
    import GuestTeamsData from './guestTeams.json'

    import TeamsList from './teamsReverseId.js'

    export default {
        components: { Gallery, Overlay, Router, Route, FilterControl, Aboutbox, SidebarNav, SiteHeader, TotopButton, DarkModeToggle },

        playersData: PlayersData.reverse(),
        guestPlayersData: GuestPlayersData,

        teamsData: TeamsData,
        guestTeamsData: GuestTeamsData,

        teamsList: TeamsList,
        // This list contains teams in {teamname: index} format
        // For sorting by teams

        onBeforeMount() {

            this.state = {
                playersShown: this.playersData,
                unfilteredPlayers: this.playersData,
                teamsData: this.teamsData,

                currentSortType: '',
                sidebarScreen: 'filter', 
                galleryScreen: 'main', // 'main' or 'guest'
            }
        },

        onMounted() {
            if (window.localStorage.getItem('darkmode')) {
                this.root.classList.add('darkmode')
            }

        },


        getPlayerData(id) {
            const allPlayers = this.playersData.concat(this.guestPlayersData)

            return allPlayers.find(player => player.id === id)
        },

        filterPlayerName(nameToSearch) {
            const playersShown = this.state.unfilteredPlayers.filter(player => {
                    return player['full-name'].toLowerCase().includes( nameToSearch.toLowerCase())
            })

            this.update({
                playersShown
            })

            this.applySort()
        },

        applyFilter(filterState) {
            const filters = filterState.appliedFilters
            const team = filterState.teamFilter


            if (!filters.length || !team) {
                // No filter checkbox is checked
                // Or no team to filter to is checked
                // Return to default

                this.update({
                    playersShown: this.state.unfilteredPlayers
                })

                this.applySort()

                return
            }

            const playersShown = this.state.unfilteredPlayers.filter(player => {
                if (filters.includes("wasmemberof")) {

                    if (player['former-teams'].includes(team)) {
                        return true
                    }

                }

                if (filters.includes("ismemberof")) {

                    if (player['team'] === team) {
                        return true
                    }
            
                }

                return false
            })

            this.update({
                playersShown
            })

            this.applySort()

        },

        changeSort(e) {
            const sortType = e.target.value

            this.update({
                currentSortType: sortType
            })

            this.applySort()
        },

        applySort() {
            const sortType = this.state.currentSortType

            if (!sortType) {
                // If no sortType is set (so it's still default)
                // don't sort anything
                return
            }

            let playersShown = this.state.playersShown

            if (sortType === 'original') {
                // Slice so we don't modify the original
                playersShown = playersShown.slice().sort((playera, playerb) => {

                    return playera.index - playerb.index

                })
            }

            if (sortType === 'latest') {
                playersShown = playersShown.slice().sort((playera, playerb) => {

                    return playerb.index - playera.index

                })
            }

            else if (sortType === 'alphabetical') {
                // Slice so we don't modify the original
                playersShown = playersShown.slice().sort((playera, playerb) => {

                    if (playera['full-name'] < playerb['full-name']) {
                        return -1
                    }

                    if (playera['full-name'] > playerb['full-name']) {
                        return 1
                    }

                    return 0

                })
            }

            else if (sortType === 'currentteam') {

                // Slice so we don't modify the original
                const teamsList = this.teamsList

                playersShown = playersShown.slice().sort((playera, playerb) => {

                    if (teamsList[playera['team']] < teamsList[playerb['team']]) {
                        return -1
                    }

                    if (teamsList[playera['team']] > teamsList[playerb['team']]) {
                        return 1
                    }

                    return 0

                })
            }

            this.update({
                playersShown,
            })
        },

        selectSidebarScreen(screen) {
            this.update({
                sidebarScreen: screen
            })
        },

        setScreenDisplay(screen) {
            if (screen === this.state.sidebarScreen) {
                return 'display: block'
            }

            else {
                return 'display: none'
            }
        },

        scrollToTop() {
            console.log('wee')
            window.scrollTo(0,0)
        },

        toggleDarkmode() {
            this.root.classList.toggle('darkmode')

            if (this.root.classList.contains('darkmode'))
                window.localStorage.setItem('darkmode', 'true')

            else {
                window.localStorage.removeItem('darkmode')
            }
        },

        switchGallery(newScreen) {
            if (this.state.galleryScreen === newScreen) {
                // No changes
                console.log("NO CHANGES")
                return
            }

            if (newScreen === 'main') {

                this.update({
                    playersShown: this.playersData,
                    unfilteredPlayers: this.playersData,
                    teamsData: this.teamsData,

                    galleryScreen: 'main', // 'main' or 'guest'
                })
            }

            else if (newScreen === 'guest') {
                this.update({
                    playersShown: this.guestPlayersData,
                    unfilteredPlayers: this.guestPlayersData,
                    teamsData: this.guestTeamsData,

                    galleryScreen: 'guest', // 'main' or 'guest'
                })   
            }

            console.log("GALLERY SCREEN RN:")
            console.log(this.state.galleryScreen)

        }
    }
    </script>
</app>
