<gallery>

    <div class="gallery">
        <div 
            each={ player in props.players } 
            
            style="{ player['size'] === 'huge' ? 'overflow: visible' : '' }"

            data-imagesrc={ `images/${player.sprites[ player['default-sprite'] ]}` }>
            
            <a href="#{ player.id }">
                <img src=''>
            </a>
        </div>
        
    </div>

    <style>
    .gallery {
        --hover-color: var(--color-soft);
        --grid-width: 150px;

        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(var(--grid-width), 1fr));

        opacity: 1;
        transition: opacity 300ms;
    }

    .gallery img {
        width: 100%;
        transition: background-color 0.5s;
        background-color: rgba(0,0,0,0);
        transform: scale(1.4, 1.4);
    }

    .gallery > div {
        overflow: hidden;
        transition: background-color 1s;
    }

    .gallery a:hover {
        background-color: var(--hover-color);
    }

    .gallery a {
        display: block;
        width: 100%;
        height: 100%;
    }

    .gallery.loading {
        opacity: 0;
        width: 10px;
        height: 10px;
    }

    .loading-screen {
        width: 100%;
        height: 100%;
        display: flex;

        justify-content: center;
        align-items: center;
        font-style: italic;
    }
    </style>

    <script>
    export default {
        onMounted() {
            this.createLazyLoading()
        },

        createLazyLoading() {
            // Without setting minHeight
            // playerbox's height will be tiny
            // not representative of what images will be visible
            this.$$('.gallery > div').forEach(playerbox => {
                playerbox.style.minHeight = playerbox.offsetWidth.toString() + "px"
            })

            this.observer = new IntersectionObserver(
                this.onImageInView, 
                { root: null, threshold: 0.25}
            )

            this.$$('.gallery > div').forEach(playerbox => {
                this.observer.observe(playerbox)
            })
        },

        onUpdated(props, state) {

            // Reset lazy-loading
            // Because updates (e.g. thanks to filter/sorting) will change the visible images
            this.observer.disconnect()

            this.$$('.gallery > div').forEach(playerbox => {
                this.observer.observe(playerbox)
            })
        },

        onImageInView(entries, observer) {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.querySelector('img').src = entry.target.dataset.imagesrc
                    this.observer.unobserve(entry.target)
                }
            })

        }
    }
    </script>

</gallery>