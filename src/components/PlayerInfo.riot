<player-info>
    <div class="player-info">
        <close-button 
            onclick={ props.onClose }
            class="close-button">    
        </close-button>

        <img class="{ props.player.size === 'huge' ? 'sprite peanutiel' : 'sprite'}" src="images/{ state.viewedSprite }" importance="high">

        <div if={ props.player.sprites.length > 1 }
            class="alt-images">
            <div 
                each={ sprite in props.player.sprites } 
                class="img-box">
                <img
                    onclick={ (e) => viewSprite(sprite) }
                    src="images/{ sprite }">
            </div>
        </div>

        <div class="info">
            <h2 class="name">
                { props.player["full-name"] }
            </h2>

            <h3 
                if={ !state.isRIV }
                class="team">

                <div if={ state.isUnknown }
                    class="smol-desc">
                    Status currently
                </div>

                <div if={ !state.isStars && !state.isUnknown}
                    class="smol-desc">
                    { props.player.mascot ? "Mascot of" : "Currently a member of the" }
                </div>
                
                { props.player["team"] }
            </h3>

            <h3
                if={ state.isRIV }
                class="team">
                Rest in Violence
            </h3>

            <p>{ state.formerTeamsText }</p> 

            <p if={ state.credits } class="credits-info">
                <raw html={ state.credits }></raw>
            </p>

            <p class="wiki-link">
                Wiki page: <a href="{ state.wikilink }" target="_blank">
                    { props.player["full-name"] }
                </a>
            </p>
        </div>
    </div>

    <style>
    :host {
        --size-small: 200px;
        --size-large: 300px;
        --size-xlarge: 320px;
        --size-huge: 500px;
        --player-size: var(--size-small);

        --player-altscaling: scale(1,1);
    }

    .sprite {
        width: var(--size-huge);
        max-width: 100%;
        height: var(--player-size);
        object-fit: none;
    }

    .sprite.peanutiel {
        /* Will allow huge sprite to go over the limit */
        max-width: initial;
        margin-left: 50%;
        transform: translateX(-50%);
    }

    .player-info {
        width: 600px;
        max-width: 95%;
        box-sizing: border-box;
        margin: 10px auto;
        border: solid 3px #fff;
        padding: 2em;

        background-color: var(--color-modalbg);
        color: var(--color-modaltext);
        text-align: center;

        position: relative;
    }

    .smol-desc {
        font-weight: 400;
    }

    .alt-images {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }
    .alt-images .img-box {
        width: 120px;
        overflow: hidden;
    }

    .alt-images img {
        width: 120px;
        transform: var(--player-altscaling);
        cursor: pointer;
    }

    .alt-images img:hover {
        background-color: rgba(255,255,255,0.1);
    }

    .close-button {
        position: absolute;
        right: 10px;
        top: 10px;
        cursor: pointer;
    }

    .close-button:hover {
        border: solid 2px;
        border-radius: 1em;
    }

    .smol-desc {
        font-size: 0.7em;
    }

    .credits-info, .wiki-link {
        font-size: 0.9em;
    }

    a {
        color: inherit;
    }
    </style>

    <script>
    import CloseButton from './CloseButton.riot'
    import Raw from './Raw.riot'

    export default {
        components: { CloseButton, Raw },

        onBeforeMount(props, state) {
            this.state = this.setUpdatedState(props, state)
        },

        onBeforeUpdate(props, state) {
            Object.assign(state, this.setUpdatedState(props, state))
        },

        setUpdatedState(props, state) {
            // Set sprite being viewed
            // Change to default when a new player is in view
            // But use the already set viewedSprite if it's an alt
            let viewedSprite

            if (props.player.id !== state.id) { 
                viewedSprite = props.player.sprites[ props.player['default-sprite'] ]
            }
            else {
                viewedSprite = state.viewedSprite
            }

            // Set credit
            const credits = this.createCreditsText()

            // Set wiki link
            const wikilink = this.createWikiLink()

            // Set sizing
            this.setPlayerSize()

            // Set description
            const formerTeamsText = this.createFormerTeamsText()

            return {
                viewedSprite,
                credits,
                wikilink,
                isRIV: props.player.team === "RIV",
                isStars: props.player.team === "Hall Stars",
                isUnknown: props.player.team === "Unknown",
                formerTeamsText,
                id: props.player.id
            }
        },

        viewSprite(sprite) {
            this.update({
                viewedSprite: sprite
            })
        },

        createCreditsText() {
            const creditsArray = this.props.player['credits']

            if (!creditsArray) {
                // No credit is listed
                return
            }

            let text = "Art inspired by "

            if (creditsArray[0]['text'] === '@hetreasky') {
                text = "Design by "
            }

            if (this.props.player.team === "Pandemonium Artists") {
                text = "Blasesona of "
            }

            const createLine = function(credit) {
                if (credit['link']) {
                    return `<a href="${ credit['link'] }" target="_blank">${ credit['text'] }</a>`
                }

                else {
                    return credit['text']
                }
            } 

            if (creditsArray.length === 1) {
                text += createLine(creditsArray[0])
            }

            else {
                for(let i = 0; i < creditsArray.length - 1; i++) {
                        text += createLine(creditsArray[i]) + ', '
                }   

                if (creditsArray.length === 2) {
                    text = text.slice(0, -2) 
                    text += " "
                    // remove comma when there's only two    
                }

                const lastCredit = creditsArray[creditsArray.length - 1]
                text += " and " + createLine(lastCredit)
            }

            return text
        },

        createWikiLink() {
            let name = this.props.player['full-name'].replace(" ", "_")
            return `https://www.blaseball.wiki/w/${name}`
        },

        setPlayerSize() {
            const playerSize = this.props.player.size
            
            this.root.style.setProperty("--player-size", `var(--size-${playerSize}`)

            if (playerSize === "small") {
                this.root.style.setProperty("--player-altscaling", "scale(2, 2)")
            }

            if (playerSize === "large") {
                this.root.style.setProperty("--player-altscaling", "scale(1.5, 1.5)")
            }
        },

        createFormerTeamsText() {
            const formerTeams = this.props.player['former-teams'].filter(team => team !== "RIV")
            // Rest in Violence shouldn't be in the former team description (but should still be filtered)

            let formerTeamsText = ''

            if (formerTeams && formerTeams.length > 0) {
                let teamsText = ''

                if (formerTeams.length === 1) {
                    // Only in one team formerly? Just add it.
                    teamsText = "the " + formerTeams[0]
                }

                else {

                    for(let i = 0; i < formerTeams.length - 1; i++) {
                        teamsText += "the " + formerTeams[i] + ', '
                    }

                    if (formerTeams.length === 2) {
                        teamsText = teamsText.slice(0, -2) 
                        teamsText += " "
                        // remove comma when there's only two    
                    }
                
                    teamsText += "and the " + formerTeams[formerTeams.length - 1]
                }

                formerTeamsText = `Formerly of ${teamsText}.`
            }

            return formerTeamsText
        }

    }
    </script>
</player-info>